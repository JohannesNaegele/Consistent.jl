using Consistent
using DataFrames
using Pipe
using Gadfly

include("GROWTH_eqs.jl")

const T = 350
lags = map(x -> initial_dict[x] isa Number ? Float64(initial_dict[x]) : 0.0, growth.endogenous_variables)[:,:]
exos_const = map(x -> Float64(initial_dict[x]), growth.exogenous_variables)
exos = hcat(exos_const, exos_const)
param_values = map(x -> Float64(params_dict[x]), growth.parameters)

# @report_opt solve(growth, lags, exos, param_values, initial=lags[:, 1], method=:broyden)
# a = similar(lags)
# @report_opt Consistent.f!(a, lags, lags, exos, param_values)
# growth.equations[findfirst(==(:G), growth.endogenous_variables)]

# Solve model for 59 periods
function progn(model, lags, exos, param_values; method=:broyden)
    results = zeros(length(model.endogenous_variables), T)
    results[:, 1] = lags
    for i in 1:(T-1)
        solution = solve(model, results[:, i], exos, param_values, initial=results[:, i], method=method)
        results[:, i + 1] = solution
    end
    return results
end

@time results = progn(growth, lags, exos, param_values, method=:broyden)
# @profview progn(growth, lags, exos, param_values)
# res = @report_opt progn(growth, lags, exos, param_values)
# res_2 = @report_opt solve(growth, zeros(length(growth.endogenous_variables), T), exos, param_values, initial=zeros(length(growth.endogenous_variables), T), method=:broyden)
# res_3 = @report_call solve(growth, zeros(length(growth.endogenous_variables), T), exos, param_values, initial=zeros(length(growth.endogenous_variables), T), method=:broyden)

# Convert results to DataFrame
df = DataFrame(results', growth.endogenous_variables)
# Add time column
df[!, :period] = 1:nrow(df)
# Select variables, convert to long format, and plot variables
@pipe df |> # Bs
    transform(_, [:Bbd, :Bbs, :Bs, :V] .=> (x -> x./_.K) .=> [:Bbd, :Bbs, :Bs, :V]) |>
    select(_, [:Bbs, :Bbd, :period]) |>
    # select(_, :V, :period) |>
    stack(_, Not(:period), variable_name=:variable) |>
    # subset(_, :period => ByRow(<(100))) |>
    plot(
        _,
        x=:period,
        y=:value,
        color=:variable,
        Geom.line
    )

# import Optimization
# import Optim
# using OptimizationOptimJL
# using ForwardDiff
# preacc = similar(lags)
# f = (x, y) -> (growth.f!(x, y, lags, exos, params); return x)
# fct = Optimization.OptimizationFunction(
#     (y, p) -> (a = f(preacc, y); max(norm(a) + abs(a[1] - a[1]))),
#     Optimization.AutoForwardDiff()
# )
# prob = Optimization.OptimizationProblem(
#     fct,
#     lags,
#     [0.0]
# )
# sol = Optimization.solve(prob, BFGS())

trick = [12460224.9860725,12398017.9476432,2127097.0384293,2479603.58952865,2061456.84176233,18310339.3067494,0.0301269303691746,0.70100357517028,0.0612956963082538,0.00259172659092623,2431543.27620936,12406886.8952865,89216542.0408732,11592779.7909174,17484956.9240895,131667610.92695,89197235.3803454,116237.612987599,1,1,1,1,0,0,803389.404260357,142818.77,87.245009784586,87.2194058707516,70071146.5224455,5.62358597864547,5.62523682468598,5.6882291468933,7.1908886406281,0.26417,0.26405136720981,70450096.7049297,0.166550008938527,18602444.355,15558672,2758271.805,18397175.5213452,15374225.1731052,16408825.5419017,319258,5186.55622019386,0.0300777557155461,5.08383255337631,0.776836589582287,76947492.7774455,17577885.2500797,57960425.0753658,59940613.2083165,1980188.13295065,170950845.490423,23773257.2473117,54428546.7178933,7569098.81907713,8024149.99562342,8000631.89124685,2877255.27826236,0.0496417214766985,716595.278262361,2160660,22323195.2782624,99653.2298127439,0.0632430491935713,34648785.3532165,876772.054654456,18293.6584078994,41450511.0061155,164598498.971289,186921694.249551,2721427.33589466,5186.55622019386,17303038.3988904,2406244.8,1889913.99881079,43719622.0960025,59660932.180629,162949.15,876772.054654456,34648785.3532165,2721427.33589466,2072525.55030577,4793952.88620044,4793952.88620044,4793952.88620044,0.035,0.055,18.1818181818182,41450511.0061155,16408825.5419017,22323195.2782624,2072525.55030577,4276883.85658557,4276883.81888558,0.103180484753362,0.0193,0,0,0,0,0.0640462845852116,3756950,3587198,432426,0.02,1325097.81,1757523.81,1801244.99324,0.0447462845852116,476147.18324,3630919.18324,0.0937446357394738,31970477.3703734,38732020.8201641,0.75,0.064,0.5,0.4,0.15,0.00122,0.1,0.05,0.10667,0.1,0.5,0.8,0.25,0.9,0.07416,0.6,0.4,0.22844,0.25,2.2,6.6,2.2,2.2,0.1,-0.04341,2.2,2.2,6.6,2.2,0.1,0.67132,2.2,2.2,2.2,6.6,0.1,0.0153,0.05,8e-04,7e-04,0.05,0.1666,0.2,0.15255,0.92,-0.20594,1,2,0.45621,0.02,0.01,0.01,0.05,0.03,0.03,87.181,0.1,0.02,0.035,0.07,0,0.12]
# trick = [12847139.6056919,12773163.234909,2135433.21254525,2554632.6469818,2083143.88137755,18863017.845508,0.0301839594285881,0.701633071373853,0.060862193299259,0.0025224867867597,2505842.43260956,12767232.9676729,92039334.3570995,11742418.5207003,18064687.1632355,135984015.55471,92161581.4557822,119724.741377227,1.00044053028471,1,1,1,0,0,829638.759815988,147103.3331,87.334116331399,87.28823214714,72417700.6650833,5.63687348995558,5.63983658515748,5.70300577691242,7.20902756220914,0.264075093767848,0.26405681412294,72715788.0642565,0.161389688979185,19201099.3326865,16086160.3701624,2806489.12578121,19028797.9481763,15934877.4718595,16961300.8982954,328176.510838035,5261.64950550768,0.0295790150670657,5.07716390433231,0.778279285336612,79478381.8966188,18156041.5604636,59892622.6185124,61740286.2991206,1847663.68060818,176583570.232841,24494783.6180457,56107561.5567029,7782958.39106339,8244418.50426299,8248186.16054174,2983558.34338589,0.0498151226802964,751238.815559653,2232319.52782624,23074434.093822,104208.065384264,0.0631816837213899,35792190.4356194,905667.436927023,18627.4518165163,42835287.9184401,170030847.570879,193105281.664701,2805378.07783515,5261.64950550768,17867085.6371611,2478432.144,1950214.55369503,45144466.0629236,61611146.734324,167788.351017015,905667.436927023,35792190.4356194,2805378.07783515,2141764.39592201,4947142.47375715,4947142.47375715,4947142.47375715,0.035,0.055,18.1818181818182,42835287.9184401,16961300.8982954,23074434.093822,2141764.39592201,4405133.15354705,4405133.11452758,0.102838881879704,0.0193,0,0,0,0,0.0635382041644293,3873202.08201641,3727832.34275056,425089.6703486,0.02,1364717.70131928,1789807.37166788,1809319.61304422,0.0442382041644293,444601.911724938,3747344.5841269,0.0935999947263291,32754010.5378738,40035734.9921174,0.75,0.064,0.5,0.4,0.15,0.00122,0.1,0.05,0.10667,0.1,0.5,0.8,0.25,0.9,0.07416,0.6,0.4,0.22844,0.25,2.2,6.6,2.2,2.2,0.1,-0.04341,2.2,2.2,6.6,2.2,0.1,0.67132,2.2,2.2,2.2,6.6,0.1,0.0153,0.05,8e-04,7e-04,0.05,0.1666,0.2,0.15255,0.92,-0.20594,1,2,0.45621,0.02,0.01,0.01,0.05,0.03,0.03,87.181,0.1,0.02,0.035,0.07,0,0.12]
trick_neu = trick[vcat([1, 2, 4, 3], 5:19, 22:114+2)]
Consistent.solve(growth, results[:, i], exos, param_values, initial=results[:, i], method=method)
argmax(abs.(Vector(df[2, 1:20]) - trick[1:20]))
argmax(abs.(Vector(df[2, 1:114]) - trick_neu))
(df[2, 22 .+ findall(x -> abs(x) > 0.00000000000001, (Vector(df[2, 23:end-1]) - trick[25:115+25-23-1]) ./ max.(0.00000000001, Vector(df[2, 23:end-1])))])
(df[3, findall(x -> abs(x) > 10000, (Vector(df[3, :]) - trick[1:115]))])
